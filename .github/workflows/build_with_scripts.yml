#
# Copyright (C) 2024 Antonino Scordino
# Copyright (C) 2024 Souhrud Reddy
#
# SPDX-License-Identifier: Apache-2.0
#

name: Build in Crave.io
on:
  workflow_dispatch:
    inputs:
       BASE_PROJECT:
        description: 'Choose a base project:'
        required: true
        type: choice
        options:
          - 'AOSP'
          - 'LineageOS'
          - 'DerpFest'
          - 'PixelOS'
          - 'RisingOS'
          - 'AOSPA'
       DEVICE_CODENAME:
        description: "Device codename:"
        required: true
        default: "apollo"
       BUILD_SCRIPT:
        description: 'Build script:'
        required: true

jobs:
  Start-Runner:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

      # Download and configure 'crave'.
    - name: Configure the 'crave' environment
      run: |
          mkdir ${HOME}/bin/
          curl -s https://raw.githubusercontent.com/accupara/crave/master/get_crave.sh | bash -s --
          mv ${PWD}/crave ${HOME}/bin/
          sudo ln -sf /home/${USER}/bin/crave /usr/bin/crave
          envsubst < ${PWD}/crave.conf.sample >> ${PWD}/crave.conf
          rm -rf ${PWD}/crave.conf.sample
      env:
        CRAVE_USERNAME: ${{  secrets.CRAVE_USERNAME  }}
        CRAVE_TOKEN: ${{  secrets.CRAVE_TOKEN  }}

    - name: Run crave devspace
      run: |
        crave -n devspace -- "if tmux has-session -t ghactions; then
          echo "Runner is already Running"
        else
          tmux kill-session -t ghactions;
          tmux new-session -d -s ghactions
          tmux send-keys -t ghactions './actions-runner/run.sh' Enter
          echo "Runner Started"
        fi "

  build:
    timeout-minutes: 960
    name: Build using foss.crave.io
    runs-on: self-hosted
    
    steps:
    
      # Create a build dir
    - name: Set-up build dir
      run: |
        case "${{ github.event.inputs.BASE_PROJECT }}" in
        "AOSP")
          export PROJECTFOLDER="/crave-devspaces/AOSP"
          export PROJECTID="35"
        ;;
        "DerpFest")
          export PROJECTFOLDER="/crave-devspaces/DerpFest-AOSP"
          export PROJECTID="64"
        ;;
        "LineageOS")
          export PROJECTFOLDER="/crave-devspaces/LineageOS"
          export PROJECTID="72"
        ;;
        "PixelOS")
          export PROJECTFOLDER="/crave-devspaces/PixelOS"
          export PROJECTID="82"
        ;;
        "RisingOS")
          export PROJECTFOLDER="/crave-devspaces/RisingOS"
          export PROJECTID="86"
        ;;
        "AOSPA")
          export PROJECTFOLDER="/crave-devspaces/AOSPA"
        ;;
        esac
        
          existing_clones=$(crave clone list --json | jq -r '.clones[]."Cloned At"')
          
          for dir in $existing_clones; do
            if [[ "$dir" != "$PROJECTFOLDER" ]]; then
              echo "Removing old project directory: $dir"
              crave clone destroy -y "$dir"
          fi
          done

          # Check if the current project directory exists or create it
          if grep -q "$PROJECTFOLDER" <<< "$existing_clones" && [ "${DCDEVSPACE}" == "1" ]; then
            echo "Base project $PROJECTFOLDER build directory exists! Reusing it."
            echo "BUILD_DIR=$PROJECTFOLDER" >> $GITHUB_ENV
          else
            crave clone create --projectID "$PROJECTID" "$PROJECTFOLDER"
            echo "BUILD_DIR=$PROJECTFOLDER" >> $GITHUB_ENV
          fi

        echo "DEVICE_CODENAME=${{ github.event.inputs.DEVICE_CODENAME }}" >> $GITHUB_ENV
        echo "Building on $PROJECTFOLDER project"

    - name: Set-up persistent hostname
      run: |
        cd ${{ env.BUILD_DIR }}
        
        if [ ! -f ".repo/manifests/crave.yaml" ]; then
            curl -s https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref }}/configs/crave.yaml > .repo/manifests/crave.yaml
        fi

    - name: Start compilation (Queue)
      continue-on-error: true
      run: |
        cd ${{ env.BUILD_DIR }}

        jq '.projects = []' ~/crave.conf > tmp && mv tmp ~/crave.conf

        crave ssh -- "rm -f out/target/product/${{ env.DEVICE_CODENAME }}/*.zip out/target/product/${{ env.DEVICE_CODENAME }}/*sum"
        
        crave run --no-patch -- "curl -s https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref }}/scripts/${{ github.event.inputs.BUILD_SCRIPT }} | bash"

    - name: Error logs
      continue-on-error: true
      run: |
        cd ${{ env.BUILD_DIR }}

        crave pull 'out/error.log'
        echo "Displaying error.log"
        cat out/error.log
        rm -rf out
        exit 0

    - name: Preparing compiled objects
      continue-on-error: false
      run: |
        cd ${{ env.BUILD_DIR }}

        NC='\033[0m'
        RED='\033[0;31m'

        rm -f *.zip
        rm -f *sum
        rm -rf out
        
        crave pull 'out/target/product/${{ env.DEVICE_CODENAME }}/*.zip'
        rm -f *-ota-*.zip
        rm -f *-eng*.zip
        rm -f lineage*ota.zip
        rm -f aosp*ota.zip
        rm -f statix*ota.zip
        if [ -z "$(find . -maxdepth 1 -name '*.zip' | sed 's|^\./||')" ]; then
            echo -e ${RED} "#######################################################################"
            echo -e ${RED} "##                    ROM ZIP FILE NOT FOUND!!!                      ##"
            echo -e ${RED} "##     THE BUILD MIGHT'VE FAILED, CANCELLED OR THE RUNNER DIED.      ##"
            echo -e ${RED} "##            CHECK THE ERROR LOG OR GO TO FOSS.CRAVE.IO             ##"
            echo -e ${RED} "#######################################################################${NC}"
            exit 1
        else
            crave pull 'out/target/product/${{ github.event.inputs.DEVICE_CODENAME }}/recovery.img' \
            'out/target/product/${{ github.event.inputs.DEVICE_CODENAME }}/*sum' \
            'out/target/product/${{ github.event.inputs.DEVICE_CODENAME }}/${{ github.event.inputs.DEVICE_CODENAME }}.json' \
            'out/target/product/${{ github.event.inputs.DEVICE_CODENAME }}/boot.img' \
            'out/target/product/${{ github.event.inputs.DEVICE_CODENAME }}/${{ github.event.inputs.DEVICE_CODENAME }}_changelog.txt'
        
            file_name=$(find . -maxdepth 1 -name '*.zip' | sed 's|^\./||')
            release_title=$(basename "$file_name" .zip)

            echo "ZIP_FILE=$file_name" >> $GITHUB_ENV
            echo "RELEASE_DATE=$(date +'%B %-d, %Y %H:%M')" >> $GITHUB_ENV
            echo "RELEASENAME=$release_title" >> $GITHUB_ENV
        fi

    - name: Upload to GitHub releases
      run: |
        cd ${{ env.BUILD_DIR }}

        NC='\033[0m'
        RED='\033[0;31m'

        if ! command -v gh &> /dev/null; then
           echo "gh could not be found. Installing gh..."
           curl -sS https://webi.sh/gh | sh
           source ~/.config/envman/PATH.env
           echo "gh installed."
        fi

        gh auth login --with-token <<< ${{ secrets.GITHUB_TOKEN }}

        if [[ -f "${{ env.ZIP_FILE }}" ]]; then
           file_size=$(stat -c%s "${{ env.ZIP_FILE }}")
           if [[ $file_size -le 2147483648 ]]; then
              gh release create ${{ github.run_id }} --repo ${{ github.repository }} --title ${{ env.RELEASENAME }} --notes "Released on ${{ env.RELEASE_DATE }}"
              gh release upload ${{ github.run_id }} --repo ${{ github.repository }} ${{ env.ZIP_FILE }} *sum out/target/product/${{ github.event.inputs.DEVICE_CODENAME }}/*
           else
              echo -e ${RED} "#######################################################################"
              echo -e ${RED} "##          ROM ZIP FILE IS TOO LARGE FOR GITHUB RELEASE!!           ##"
              echo -e ${RED} "##         GO TO YOUR DEVSPACE AND UPLOAD IT SOMEWHERE ELSE          ##"
              echo -e ${RED} "#######################################################################${NC}"
              echo "FILE PATH: ${{ env.BUILD_DIR }}/${{ env.ZIP_FILE }}"
           fi
        fi

    - name: Execute if the job is cancelled
      if:  ${{ cancelled() }}
      run: |
        cd ${{ env.BUILD_DIR }}

        crave stop --all

