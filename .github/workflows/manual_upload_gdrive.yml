#
# Copyright (C) 2024 Antonino Scordino
# Copyright (C) 2024 Souhrud Reddy
#
# SPDX-License-Identifier: Apache-2.0
#

name: Manual Gdrive Upload
on:
  workflow_dispatch:
    inputs:
      DEVICE_CODENAME:
        description: 'Device Codename'
        default: apollo
        required: true

jobs:
  Start-Runner:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

      # Download and configure 'crave'.
    - name: Configure the 'crave' environment
      run: |
          mkdir ${HOME}/bin/
          curl -s https://raw.githubusercontent.com/accupara/crave/master/get_crave.sh | bash -s --
          mv ${PWD}/crave ${HOME}/bin/
          sudo ln -sf /home/${USER}/bin/crave /usr/bin/crave
          envsubst < ${PWD}/crave.conf.sample >> ${PWD}/crave.conf
          rm -rf ${PWD}/crave.conf.sample
      env:
        CRAVE_USERNAME: ${{  secrets.CRAVE_USERNAME  }}
        CRAVE_TOKEN: ${{  secrets.CRAVE_TOKEN  }}

    - name: Run crave devspace
      run: |
        crave -n devspace -- "if tmux has-session -t ghactions; then
          echo "Runner is already Running"
        else
          tmux kill-session -t ghactions;
          tmux new-session -d -s ghactions
          tmux send-keys -t ghactions './actions-runner/run.sh' Enter
          echo "Runner Started"
        fi "

  upload:
    timeout-minutes: 960
    name: Upload zip from devspace
    runs-on: self-hosted
    
    steps:
    
    - name: Build dir
      run: |
        build_dir=$(crave clone list --json | jq -r '.clones[]."Cloned At"')
        echo "BUILD_DIR=$build_dir" >> $GITHUB_ENV

    - name: Preparing ROM zip
      continue-on-error: false
      run: |
        cd ${{ env.BUILD_DIR }}
        
        rm -f *-ota-*.zip
        rm -f *-eng*.zip
        rm -f lineage*ota.zip
        rm -f aosp*ota.zip
        rm -f statix*ota.zip

        file_name=$(find . -maxdepth 1 -name '*.zip' | sed 's|^\./||')
        echo $file_name
        bash_upload=$(curl -s -F "file=@$file_name" bashupload.com)
        download_link=$(echo "$bash_upload" | grep -o 'wget .*' | sed 's/^wget //')
        echo $download_link
        
        echo "DOWNLOAD_LINK=$download_link" >> $GITHUB_ENV
        echo "FILE_NAME=$file_name" >> $GITHUB_ENV

    outputs:
      DOWNLOAD_LINK: ${{ env.DOWNLOAD_LINK }}
      FILE_NAME: ${{ env.FILE_NAME }}
      
  Upload-to-Gdrive:
    needs: upload
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ github.workspace }}

    steps:

      - name: Download the zip
        run: |
          DOWNLOAD_LINK="${{ needs.upload.outputs.DOWNLOAD_LINK }}"
          FILE_NAME="${{ needs.upload.outputs.FILE_NAME }}"
          rm -rf ${{ github.workspace }}/*
          wget $DOWNLOAD_LINK

          ROM_ZIP=$(ls *.zip)

          if [ "$ROM_ZIP" != "$FILE_NAME" ]; then
             mv "$ROM_ZIP" "$FILE_NAME"
          fi

          echo "FILE_NAME=$FILE_NAME" >> $GITHUB_ENV
       
      - name: Upload to Google Drive
        uses: adityak74/google-drive-upload-git-action@v0.3
        with:
          credentials: ${{ secrets.GSERVICE }}
          folderId: ${{ secrets.FOLDER_ID }}
          filename: ${{ env.FILE_NAME }}
          overwrite: "true"
 
