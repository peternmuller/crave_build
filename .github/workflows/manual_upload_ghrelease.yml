#
# Copyright (C) 2024 Antonino Scordino
# Copyright (C) 2024 Souhrud Reddy
#
# SPDX-License-Identifier: Apache-2.0
#

name: Manual GitHub release
on:
  workflow_dispatch:
    inputs:
      DEVICE_CODENAME:
        description: 'Device Codename'
        default: apollo
        required: true

jobs:
  Start-Runner:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

      # Download and configure 'crave'.
    - name: Configure the 'crave' environment
      run: |
          mkdir ${HOME}/bin/
          curl -s https://raw.githubusercontent.com/accupara/crave/master/get_crave.sh | bash -s --
          mv ${PWD}/crave ${HOME}/bin/
          sudo ln -sf /home/${USER}/bin/crave /usr/bin/crave
          envsubst < ${PWD}/crave.conf.sample >> ${PWD}/crave.conf
          rm -rf ${PWD}/crave.conf.sample
      env:
        CRAVE_USERNAME: ${{  secrets.CRAVE_USERNAME  }}
        CRAVE_TOKEN: ${{  secrets.CRAVE_TOKEN  }}

    - name: Run crave devspace
      run: |
        crave -n devspace -- "if tmux has-session -t ghactions; then
          echo "Runner is already Running"
        else
          tmux kill-session -t ghactions;
          tmux new-session -d -s ghactions
          tmux send-keys -t ghactions './actions-runner/run.sh' Enter
          echo "Runner Started"
        fi "

  upload:
    timeout-minutes: 960
    name: Release compiled objects
    runs-on: self-hosted

    steps:

    - name: Build dir
      run: |
        build_dir=$(crave clone list --json | jq -r '.clones[]."Cloned At"')
        echo "BUILD_DIR=$build_dir" >> $GITHUB_ENV

    - name: Preparing compiled objects
      continue-on-error: false
      run: |
        cd ${{ env.BUILD_DIR }}

            rm -f *.zip
            rm -f *sum
            rm -rf out

            crave pull 'out/target/product/${{ github.event.inputs.DEVICE_CODENAME }}/*.zip' \
            'out/target/product/${{ github.event.inputs.DEVICE_CODENAME }}/recovery.img' \
            'out/target/product/${{ github.event.inputs.DEVICE_CODENAME }}/*sum' \
            'out/target/product/${{ github.event.inputs.DEVICE_CODENAME }}/${{ github.event.inputs.DEVICE_CODENAME }}.json' \
            'out/target/product/${{ github.event.inputs.DEVICE_CODENAME }}/boot.img' \
            'out/target/product/${{ github.event.inputs.DEVICE_CODENAME }}/${{ github.event.inputs.DEVICE_CODENAME }}_changelog.txt'

            rm -f *-ota-*.zip
            rm -f *-eng*.zip
            rm -f lineage*ota.zip
            rm -f aosp*ota.zip
            rm -f statix*ota.zip
        
            file_name=$(find . -maxdepth 1 -name '*.zip' | sed 's|^\./||')
            release_title=$(basename "$file_name" .zip)

            echo "ZIP_FILE=$file_name" >> $GITHUB_ENV
            echo "RELEASE_DATE=$(date +'%B %-d, %Y %H:%M')" >> $GITHUB_ENV
            echo "RELEASENAME=$release_title" >> $GITHUB_ENV

    - name: Upload to GitHub releases
      run: |
        cd ${{ env.BUILD_DIR }}

        NC='\033[0m'
        RED='\033[0;31m'

        if ! command -v gh &> /dev/null; then
           echo "gh could not be found. Installing gh..."
           curl -sS https://webi.sh/gh | sh
           source ~/.config/envman/PATH.env
           echo "gh installed."
        fi

        gh auth login --with-token <<< ${{ secrets.GITHUB_TOKEN }}

        if [[ -f "${{ env.ZIP_FILE }}" ]]; then
           file_size=$(stat -c%s "${{ env.ZIP_FILE }}")
           if [[ $file_size -le 2147483648 ]]; then
              gh release create ${{ github.run_id }} --repo ${{ github.repository }} --title ${{ env.RELEASENAME }} --notes "Released on ${{ env.RELEASE_DATE }}"
              gh release upload ${{ github.run_id }} --repo ${{ github.repository }} ${{ env.ZIP_FILE }} *sum out/target/product/${{ github.event.inputs.DEVICE_CODENAME }}/*
           else
              echo -e ${RED} "#######################################################################"
              echo -e ${RED} "##          ROM ZIP FILE IS TOO LARGE FOR GITHUB RELEASE!!           ##"
              echo -e ${RED} "##         GO TO YOUR DEVSPACE AND UPLOAD IT SOMEWHERE ELSE          ##"
              echo -e ${RED} "#######################################################################${NC}"
              echo "FILE PATH: ${{ env.BUILD_DIR }}/${{ env.ZIP_FILE }}"
           fi
        fi
